---------------------------------------INGLES-------------------------------------------------

/**
Resume: Use of Streams in Java

Streams in Java provide a powerful and efficient way to process collections of data. 
They allow for concise and expressive code, enabling developers to perform complex operations 
on data with ease. In this resume, we will explore the different types of streams and their usage 
with examples.

1. IntStream:
   - IntStream is used to process streams of primitive integers.
   - Example: Summing all the even numbers from 1 to 10 using IntStream.
     ```java
     int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
     int sum = Arrays.stream(numbers)
                           .filter(n -> n % 2 == 0)
                           .sum();
     ```
     Result: `sum = 30`

2. Stream<T>:
   - Stream<T> is used to process streams of objects of type T.
   - Example: Filtering a list of strings to get only the ones starting with "A".
     ```java
     String[] strings = {"Apple", "Banana", "Avocado", "Orange"};
     List<String> filteredStrings = Arrays.stream(strings)
                                                       .filter(s -> s.startsWith("A"))
                                                       .collect(Collectors.toList());
     ```
     Result: `filteredStrings = ["Apple", "Avocado"]`

3. Map:
   - Map is used to transform the elements of a stream into another form.
   - Example: Converting a list of integers to their squares using map.
     ```java
     int[] numbers = {1, 2, 3, 4, 5};
     List<Integer> squares = Arrays.stream(numbers)
                                             .map(n -> n * n)
                                             .collect(Collectors.toList());
     ```
     Result: `squares = [1, 4, 9, 16, 25]`

4. Reduce:
   - Reduce is used to perform a reduction operation on the elements of a stream.
   - Example: Finding the maximum value from a list of integers using reduce.
     ```java
     int[] numbers = {1, 5, 3, 8, 2};
     Optional<Integer> max = Arrays.stream(numbers)
                                             .reduce(Integer::max);
     ```
     Result: `max = Optional[8]`

These are just a few examples of the many possibilities that streams offer in Java. 
By leveraging streams, developers can write cleaner and more efficient code for data 
processing tasks.
*/


---------------------------------------Español-------------------------------------------------
/**
Resumen: Uso de Streams en Java

Los Streams en Java proporcionan una forma poderosa y eficiente de procesar colecciones de datos. 
Permiten escribir código conciso y expresivo, habilitando a los desarrolladores para realizar 
operaciones complejas en los datos con facilidad. En este resumen, exploraremos los diferentes 
tipos de streams y su uso con ejemplos.

1. IntStream:
   - IntStream se usa para procesar streams de enteros primitivos.
   - Ejemplo: Sumar todos los números pares del 1 al 10 usando IntStream.
     ```java
     int[] numeros = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
     int suma = Arrays.stream(numeros)
                           .filter(n -> n % 2 == 0)
                           .sum();
     ```
     Resultado: `suma = 30`

2. Stream<T>:
   - Stream<T> se usa para procesar streams de objetos de tipo T.
   - Ejemplo: Filtrar una lista de cadenas para obtener solo las que comienzan con "A".
     ```java
     String[] cadenas = {"Apple", "Banana", "Avocado", "Orange"};
     List<String> cadenasFiltradas = Arrays.stream(cadenas)
                                                       .filter(s -> s.startsWith("A"))
                                                       .collect(Collectors.toList());
     ```
     Resultado: `cadenasFiltradas = ["Apple", "Avocado"]`

3. Map:
   - Map se usa para transformar los elementos de un stream en otra forma.
   - Ejemplo: Convertir una lista de enteros en sus cuadrados usando map.
     ```java
     int[] numeros = {1, 2, 3, 4, 5};
     List<Integer> cuadrados = Arrays.stream(numeros)
                                             .map(n -> n * n)
                                             .collect(Collectors.toList());
     ```
     Resultado: `cuadrados = [1, 4, 9, 16, 25]`

4. Reduce:
   - Reduce se usa para realizar una operación de reducción en los elementos de un stream.
   - Ejemplo: Encontrar el valor máximo de una lista de enteros usando reduce.
     ```java
     int[] numeros = {1, 5, 3, 8, 2};
     Optional<Integer> max = Arrays.stream(numeros)
                                             .reduce(Integer::max);
     ```
     Resultado: `max = Optional[8]`

Estos son solo algunos ejemplos de las muchas posibilidades que los streams ofrecen en Java. 
Al aprovechar los streams, los desarrolladores pueden escribir código más limpio y eficiente 
para tareas de procesamiento de datos.
*/





